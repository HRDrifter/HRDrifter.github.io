<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ephemreal</title>
    <url>/2020/Ephemreal/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="https://i.loli.net/2021/05/07/64FqkcE3WOUwPiy.png" alt="ephemreal.png"><br><img src="https://i.loli.net/2021/05/07/UTfbhj5FOKsr2CI.png" alt="room.png"></p>
<span id="more"></span>

<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><ul>
<li>此游戏是梦日记的fangame，也就是所谓的同人游戏。并不是梦日记的续作，<strong>与梦日记和kikiyama氏完全没有关系。</strong><br>此外，Ephemreal现处于开发状态，因此内容较少，并没有实装结局。今后还会不定期进行更新和修复，欢迎向我报告遇到的bug。</li>
</ul>
<h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><ul>
<li>移动：<code>方向键</code></li>
<li>确定：<code>Z/Enter</code></li>
<li>菜单/取消：<code>X</code></li>
<li>特殊动作：<code>Shift</code></li>
<li>捏脸：<code>数字9</code></li>
<li>存档：<code>调查主人公卧室右下角的显示屏</code></li>
</ul>
<p>在梦中四处转转，调查一些特殊物品取得<code>效果</code>吧。</p>
<h3 id="版本履历"><a href="#版本履历" class="headerlink" title="版本履历"></a>版本履历</h3><table>
<thead>
<tr>
<th>版本信息</th>
<th>下载连接</th>
</tr>
</thead>
<tbody><tr>
<td>ver0.00</td>
<td><a href="https://www.mediafire.com/file/27u86p7gu7hx97b/Ephemreal_ver0.00.rar/file">简体中文</a></td>
</tr>
<tr>
<td>ver0.00+</td>
<td><a href="https://www.mediafire.com/file/875djymsazazs6d/Ephemreal_ver0.00%252B.rar/file">ENGLISH</a></td>
</tr>
</tbody></table>
<h3 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h3><p>安装运行出现了问题？<a href="https://drifter-games.com/2020/Help/">请看这边</a><br>我想投稿，该怎么做？<a href="https://drifter-games.com/2020/subrules/">请点这里</a></p>
<h2 id="其他链接"><a href="#其他链接" class="headerlink" title="其他链接"></a>其他链接</h2><p><a href="https://www.pixiv.net/artworks/86174142">pixiv发布页面</a><br><a href="https://yumenikkifg.fandom.com/wiki/Ephemreal">英文wiki页面</a></p>
]]></content>
      <categories>
        <category>更新/发布信息</category>
      </categories>
      <tags>
        <tag>梦日记派生</tag>
        <tag>游戏发布</tag>
      </tags>
  </entry>
  <entry>
    <title>讲解RM2K3-System的原理</title>
    <url>/2021/System/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="有关System"><a href="#有关System" class="headerlink" title="有关System"></a>有关System</h2><p>System一般指的是菜单样式，它和Chipset、Charset一样属于可自定义的图像。</p>
<span id="more"></span>

<h3 id="规格和配置"><a href="#规格和配置" class="headerlink" title="规格和配置"></a>规格和配置</h3><ol>
<li><p>规格</p>
<table>
<thead>
<tr>
<th>图像大小</th>
<th>导入格式</th>
</tr>
</thead>
<tbody><tr>
<td>160×80</td>
<td>PNG、BMP、XYZ</td>
</tr>
</tbody></table>
</li>
<li><p>配置</p>
<p><img src="https://z3.ax1x.com/2021/05/16/ggirBq.png" alt="ggirBq.png"></p>
<p>这是一张System的模板。里面包含了5块32×32的格子，24块16×16的格子以及12块8×16的小格子。</p>
</li>
</ol>
<hr>
<h2 id="自定义菜单样式"><a href="#自定义菜单样式" class="headerlink" title="自定义菜单样式"></a>自定义菜单样式</h2><p><img src="https://z3.ax1x.com/2021/05/16/ggFEvj.png" alt="ggFEvj.png"></p>
<p>为了方便理解，我给每个区域标注了对应的字母和数字。如果想看指定区域的解析，可以通过左侧的目录直接跳转（仅限电脑端）</p>
<h3 id="A区域：菜单背景"><a href="#A区域：菜单背景" class="headerlink" title="A区域：菜单背景"></a>A区域：菜单背景</h3><p>对话框的背景、游戏开场时的选项背景、状态栏的背景……这些全都属于A区域管理的部分。可以在里面随意画上自己喜欢的颜色或者图案。</p>
<p>通过设置<code>Window Background</code>，可以得到拉伸或平铺的效果。</p>
<p><img src="https://z3.ax1x.com/2021/05/16/ggkZWD.png" alt="ggkZWD.png"></p>
<p><code>Stretch to Fit</code>适合纯色/渐变型背景；<code>Tiled Pattern</code>则适合图案型背景。</p>
<p>※注意：图案型背景选择Stretch的话效果会很糟糕，如果设计了图案的话最好不要选择这项。</p>
<h3 id="B区域：边框和指示箭头"><a href="#B区域：边框和指示箭头" class="headerlink" title="B区域：边框和指示箭头"></a>B区域：边框和指示箭头</h3><p>黄色的部分是边框所占的最大空间，只要不超过黄色的部分，边框无论画成圆角或方角，甚至是不规则图形都可以正常被系统读取。四个直角的读取范围是8×8，剩下的内容会根据边框的长度进行压缩或平铺。</p>
<p>橙色的部分是指示箭头所占的最大空间，对话框底部闪烁的图案、菜单滚动页面的指示箭头都靠这部分显示，默认闪烁。上半部分和下半部分的大小都是8×16，注意不要画过头了。</p>
<h3 id="C-amp-D区域：光标"><a href="#C-amp-D区域：光标" class="headerlink" title="C&amp;D区域：光标"></a>C&amp;D区域：光标</h3><p>这两块绿色的部分相当于起到光标的作用，两者交替显示形成一种闪烁的效果：</p>
<p><img src="https://z3.ax1x.com/2021/05/16/ggVQm9.gif" alt="ggVQm9.gif"></p>
<p>和边框一样，只要不超过这些区域，无论画成圆角或方角，甚至是不规则图形都可以正常被系统读取。比如可以在宽的部分加上指示标记，或者只画一条线充当选项的下划线……请发挥想象力！</p>
<h3 id="E区域：店铺页面的显示"><a href="#E区域：店铺页面的显示" class="headerlink" title="E区域：店铺页面的显示"></a>E区域：店铺页面的显示</h3><p>这部分一般会在武器防具店购买东西的时候用上，如果是做派生的话这部分的内容是用不上的，想空着也可以空着。</p>
<p>从上至下分别为<code>状态提升</code>、<code>状态不变</code>、<code>状态下降</code>以及<code>正在装备</code>。它们的播放顺序都是从左往右1→2→3→4</p>
<h3 id="F区域：整体背景"><a href="#F区域：整体背景" class="headerlink" title="F区域：整体背景"></a>F区域：整体背景</h3><p>它负责没有被边框框住的部分，比如持有金和菜单栏之间的背景，存档页面的背景（如图）。没什么需求的话可以搞成纯黑的，或者和A区域使用同一种色系。</p>
<p><img src="https://z3.ax1x.com/2021/05/17/g2mxo9.png" alt="g2mxo9.png"></p>
<p>蓝色的部分就是F区域，橙色的部分则是B区域指示箭头的下半部分。</p>
<h3 id="G区域：文字的影子"><a href="#G区域：文字的影子" class="headerlink" title="G区域：文字的影子"></a>G区域：文字的影子</h3><p>此区域的颜色会影响所有的文字和符号，它可以让字符变得更加立体和美观。一般设定成深色，可以按实际需求调整。</p>
<h3 id="0-19：文字的颜色"><a href="#0-19：文字的颜色" class="headerlink" title="0~19：文字的颜色"></a>0~19：文字的颜色</h3><p>0：默认文本颜色</p>
<p>1：金钱的单位颜色、状态文本的颜色（例如HP、MP、LV等）</p>
<p>2：状态数值上升时的颜色</p>
<p>3：某选项无法选择时的颜色（例如游戏在未读出存档时Continue的颜色，详见CD区域的GIF）</p>
<p>以上四种是制作派生时会用到的颜色。</p>
<p>剩下的4~19虽然不会在游戏里直接显示，但是可以随时通过<code>\c[]</code>调用。例如我在文本里输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@&gt;Text: Hello, I&#x27;m \c[3]Drifter!</span><br></pre></td></tr></table></figure>

<p><img src="https://z3.ax1x.com/2021/05/17/g2nqfI.png" alt="g2nqfI.png"></p>
<blockquote>
<p>注：如果想在一段长台词里标亮其中一段句子或词语，记得在标亮词句后输入<code>\c[0]</code>以保证之后的文本颜色回到默认状态。</p>
</blockquote>
<p>只要在[]中输入编号(1~19)，系统就会自动调用System中对应的颜色。当输入的数值超过19的情况，系统会显示默认的颜色（0号）。</p>
<h3 id="彩色区域：计时器的样式"><a href="#彩色区域：计时器的样式" class="headerlink" title="彩色区域：计时器的样式"></a>彩色区域：计时器的样式</h3><p>这段区域由12块8×16的小格子组成，一般在里面填写0~9以及冒号（剩余一段8×16的空格在游戏里不会被显示）。当在事件里启用计时器时，画面的左上角就会显示这部分的内容。</p>
<p>制作派生时一般用它来显示入睡时间。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@&gt; Timer 1 Operation: Start</span><br><span class="line">@&gt; Timer 1 Operation: Set Time, 0 minutes 03 seconds</span><br></pre></td></tr></table></figure>

<p>像本家或派生三秒入睡，实际上只需要布置1~3的数字在此区域就可以运行了。如果没有计时器的要求，那么这段区域空着也可以。</p>
<h3 id="椭圆区域：飞行船的影子"><a href="#椭圆区域：飞行船的影子" class="headerlink" title="椭圆区域：飞行船的影子"></a>椭圆区域：飞行船的影子</h3><p>它是Vehicle中的Airship的影子，派生一般用不上这块区域其实可以忽略。</p>
<p>两个椭圆会被系统认定为两个叠加的半透明图案，在飞行船底部形成一个边缘淡化的影子。</p>
<hr>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><img src="https://z3.ax1x.com/2021/05/17/g2uMN9.png" alt="g2uMN9.png"  />

<p>用一张以前做的菜单样式作为例子，注意边框、指示箭头和计时器数字的背景都指定了透明色。</p>
<img src="https://z3.ax1x.com/2021/05/17/g2u191.png" alt="g2u191.png" style="zoom:80%;" />

<p>右侧边框的内容可以通过数据库的<code>System 2</code>中得到修改，制作派生时可以将第一行的<code>Items</code>换成<code>Effects</code>，将<code>Equipment</code>与<code>Save</code>关闭。</p>
<p>边框底部是持有金的显示，货币单位G可以在<code>Glossary4</code>的<code>Shop Paramenters</code>里进行修改。</p>
<p>右侧是有关主人公的数值面板，第一行是<code>Name</code>和<code>Nickname</code>，制作派生时可以将主人公的状态输进昵称栏里。（第二行的特殊符号我会在下方进行详细的解释）</p>
<h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h2><p>RM2003自带了特殊符号，一共52种。只要使用<code>$英文字母</code>就能随时调用。</p>
<p>在文本框里输入以下内容可以看到所有的符号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@&gt; Text: $a $b $c $d $e $f $g $h $i $j $k $l $m $n $o $p $q</span><br><span class="line"> :     : $r $s $t $u $v $w $x $y $z</span><br><span class="line"> :     : $A $B $C $D $E $F $G $H $I $J $K $L $M $N $O $P $Q</span><br><span class="line"> :     : $R $S $T $U $V $W $X $Y $Z</span><br></pre></td></tr></table></figure>



<p><img src="https://z3.ax1x.com/2021/05/17/g2uVXT.png" alt="g2uVXT.png"></p>
<p>这些符号也可以应用到数据库中的<code>Terms</code>里。找到<code>Glossary5</code>，可以在里面设置Level、HP、MP、EXP的缩略符号。</p>
<p>例如在<code>HP(Abbr.)</code>里输入<code>$k</code>，那么在菜单栏里的HP代表符号就会变成一颗心的形状。</p>
<p><img src="https://z3.ax1x.com/2021/05/17/g2un74.png" alt="g2un74.png"></p>
<p>大家可以根据个人喜好决定内容。</p>
<hr>
<p>※以上内容仅作为个人观点，如有解释不当的部分欢迎讨论。内容随时会进行更新和补充。</p>
<p>※本文章的内容，包括文字、图片均为本人(Drifter)原创。可将文章提供的内容用于个人学习、研究以及其他非商业用途。转载时请务必注明地址和原作者信息，请勿用于商业性或盈利性用途。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>RM2003</tag>
        <tag>游戏开发</tag>
      </tags>
  </entry>
  <entry>
    <title>讲解RM2K3-Charset的原理</title>
    <url>/2021/Charset/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="有关Charset"><a href="#有关Charset" class="headerlink" title="有关Charset"></a>有关Charset</h2><p>Charset是存放角色行走图的地方，也是制作游戏时必不可少的元素之一。</p>
<span id="more"></span>

<h3 id="规格和配置"><a href="#规格和配置" class="headerlink" title="规格和配置"></a>规格和配置</h3><ol>
<li><p>规格</p>
<table>
<thead>
<tr>
<th>图像大小</th>
<th>导入格式</th>
</tr>
</thead>
<tbody><tr>
<td>288×256</td>
<td>PNG、BMP、XYZ</td>
</tr>
</tbody></table>
</li>
<li><p>配置</p>
<p><img src="https://z3.ax1x.com/2021/05/14/gsxFne.png" alt="Charset"></p>
<p>这是一张Charset的模板。一格的大小是24×32像素，一组共12块。一整张Charset正好可以放下八组。</p>
<p>单独把一组拆出来进行解析：</p>
<p><img src="https://z3.ax1x.com/2021/05/14/gsxOv8.png" alt="gsxOv8.png"></p>
<p>在这里我把16×16的格子们放置在中间，可以较为直观地看出一格的长度正好是16的两倍，宽度左右各多出了4个像素点的空间。其实多出来的内容一样可以在游戏中显示出来，不需要担心自己的图像超过了范围。</p>
<p>但需要注意的是如果地图元件没有设置好通行的话，这部分的内容就会<strong>穿过该元件的边缘</strong>，所以除非自己有特殊需求，<strong>尽量</strong>不要让角色的宽度占满所有空间。</p>
</li>
</ol>
<hr>
<h2 id="初阶：角色的配置"><a href="#初阶：角色的配置" class="headerlink" title="初阶：角色的配置"></a>初阶：角色的配置</h2><p><img src="https://z3.ax1x.com/2021/05/14/gyp64s.png" alt="OC"></p>
<p>用以前画的行走图拿出来举例，一组一共对应了角色的四个方向：上、右、下、左，每个朝向都对应了三帧动画。</p>
<p>系统默认玩家不动的时候，角色的状态以正中间的纵列为主，被称为<code>静止帧</code>；当玩家输入按键的时候，图像会进行1→2→3→2的循环并同时移动位置，这些被称为<code>摆动帧</code>。</p>
<p>制作角色行走图时需要注意的几点要求：</p>
<ul>
<li>画行走图时，需要注意角色静止时和行走时的<code>高低差</code>。如果三个动作都在同一水平面上，会感觉角色在地图上平移，不自然不美观。</li>
<li>配置的时候切记<code>上右下左</code>的顺序，千万不能搞反方向。</li>
<li>给角色增加细节，例如衣服的摆动和头发的摆动。</li>
</ul>
<h2 id="进阶：物件的配置"><a href="#进阶：物件的配置" class="headerlink" title="进阶：物件的配置"></a>进阶：物件的配置</h2><p>那除了画人，是不是还可以画物体呢？</p>
<p>当然可以！</p>
<h3 id="配置小物件"><a href="#配置小物件" class="headerlink" title="配置小物件"></a>配置小物件</h3><p><a href="https://drifter-games.com/2021/Chipset/">上一章</a>我们提到，Chipset分为<code>下层元件</code>和<code>上层元件</code>，而Charset的物体，在地图上可以被分类成第三类元件：它不仅可以充当下层元件，甚至还可以存在于上层元件之上。比如可以是床上的一本书，可以是桌上的台灯，栏杆上挂着的衣服……如果Chipset的空间已经占满，或想做一个可交互的小物件时，使用行走图就可以解决大部分问题。</p>
<p><img src="https://z3.ax1x.com/2021/05/15/gyJr4J.png" alt="台灯"></p>
<p>以一盏台灯为例，如果把它放进游戏里的话就会是这样的：</p>
<p><img src="https://z3.ax1x.com/2021/05/15/gyJgjx.png" alt="穿过台灯"></p>
<p>角色虽然不能从杆子的部分穿过，但是可以从灯的后面穿过。我们得出一个结论：<strong>行走图的上半部分会被系统默认为☆可穿过元件。</strong>只要合理利用这点就能很快在地图上配置好各种各样的物件，而不用担心Chipset的上限问题。</p>
<h3 id="配置大物件"><a href="#配置大物件" class="headerlink" title="配置大物件"></a>配置大物件</h3><p>当然不是所有的物体都像是刚才的台灯那样刚刚好，比如我画了一张大到一个格子塞不下的床：</p>
<p><img src="https://z3.ax1x.com/2021/05/15/gytASA.png" alt="gytASA.png"></p>
<p>这种情况就要逐个把它们分进小格子里一段一段配置。在配置一节讲到过，行走图一格的宽度比普通的一格宽度多出了8个像素点，但这部分又确实能在地图上显示，所以左右拆分的时候也应当<strong>空出相同数量的像素点</strong>，这样就不会出现显示错误。</p>
<p>根据以上的结论，可以得出两种拆分方法：</p>
<ol>
<li>利用行走图的宽度特性：内容占满了一整格24×32的情况，左右两侧就应该留出4+4=8格像素的空间。</li>
<li>不利用行走图的宽度特性：内容只占中间16×32的情况，左右两侧就应该留出行走图宽度多出来的4格像素的空间。</li>
</ol>
<p>大家可以视实际情况决定拆分方法！在这里我用第一种方法举例：</p>
<p><img src="https://z3.ax1x.com/2021/05/15/gytZOP.png" alt="gytZOP.png"></p>
<p>因为床的中心占满了整个24×32的格子，所以两侧都得空出8个像素的空间。理论上这张床放进游戏里是不会有任何显示错误的，但放进游戏里进行测试的时候，却发现了这样的问题：</p>
<p><img src="https://z3.ax1x.com/2021/05/15/gytUTU.gif" alt="gytUTU.gif"></p>
<p>主人公能从中间穿过的原因在于上一章我们得出的结论：</p>
<blockquote>
<p>行走图的上半部分会被系统默认为可穿过元件</p>
</blockquote>
<p>于是再进行一次拆分工作：</p>
<p><img src="https://z3.ax1x.com/2021/05/15/gytg0K.png" alt="gytg0K.png"></p>
<p>如图所示，只要把这些会穿过的部分单独拆出来放进另一组的<code>下半部分</code>就不会出现这种问题了。</p>
<p>最后把这些床全都放进行走图里做一个对比：</p>
<p><img src="https://z3.ax1x.com/2021/05/15/gyto6I.png" alt="gyto6I.png"></p>
<p>第一张床是简单的拆分法、第二张床是经过改良之后的拆分法、第三张床就是完全没有进行拆分的情况。把这些床放进编辑器里进行配置（<strong>配置时要记得将部件的<code>Animation Type</code>设置成<code>Fixed Graphic</code>才能在地图上正常显示</strong>）</p>
<p><img src="https://z3.ax1x.com/2021/05/15/gytTXt.png" alt="gytTXt.png"></p>
<p><img src="https://z3.ax1x.com/2021/05/15/gytHnP.png" alt="gytHnP.png"></p>
<p>如图所示，未进行拆分的床变得一塌糊涂，而经过拆分的床则没有这种问题。学会拆分就不用担心Chipset空间不够，是一种非常实用的技能。</p>
<blockquote>
<p>注：其实第一张床出现的穿过问题，可以在中间那一排加上属性为<code>Same as Characters</code>的空白事件强制让主人公无法通过。大家可以视地图的具体情况来确定拆分方法。</p>
</blockquote>
<h2 id="高阶：动画的配置"><a href="#高阶：动画的配置" class="headerlink" title="高阶：动画的配置"></a>高阶：动画的配置</h2><p>动画的配置需要了解事件编辑器中的<code>Animation Type</code>（动画类型）和<code>Movement Speed</code>（移动速度），通过这两者的配合就可以在行走图做出各种不同的帧动画。</p>
<p><code>Animation Type</code>一共有7种设置方法：</p>
<table>
<thead>
<tr>
<th>Animation Type</th>
<th>动画类型</th>
<th>处理方法</th>
</tr>
</thead>
<tbody><tr>
<td>Standing Animation</td>
<td>站立动画</td>
<td>移动时不会固定朝向和摆动帧动画</td>
</tr>
<tr>
<td>Walking Animation</td>
<td>行走动画</td>
<td>循环播放摆动帧动画</td>
</tr>
<tr>
<td>Direction Fix/Inanimated</td>
<td>方向校正/无动画</td>
<td>固定朝向，不固定摆动帧动画</td>
</tr>
<tr>
<td>Direction Fix/Animated</td>
<td>方向校正/动画</td>
<td>固定朝向，循环播放摆动帧动画</td>
</tr>
<tr>
<td>Fixed Graphic</td>
<td>图像校正</td>
<td>可指定任意方向的任意帧数</td>
</tr>
<tr>
<td>Spin</td>
<td>旋转</td>
<td>固定读取静止帧，按照上右下左的顺序循环播放</td>
</tr>
<tr>
<td>Step Frame Fix</td>
<td>摆动帧校正</td>
<td>固定读取静止帧，不固定朝向</td>
</tr>
</tbody></table>
<p>建议实际操作感受一下这七种类型的区别。</p>
<h3 id="三帧-amp-四帧"><a href="#三帧-amp-四帧" class="headerlink" title="三帧&amp;四帧"></a>三帧&amp;四帧</h3><p>在行走图里画帧动画，一般会用上<code>Walking Animation</code>和<code>Spin</code>两种模式。行走动画默认读取横向摆动帧，旋转默认读取纵向静止帧，由此可得一张行走图最多可以放置四种行走动画或三种旋转动画。</p>
<p>举一个例子：</p>
<p><img src="https://z3.ax1x.com/2021/05/15/g6NGWQ.png" alt="g6NGWQ.png"></p>
<p>中间的静止帧是一个旋转的圆环，其他摆动帧分别为跳动的圆环、拉长的圆环、旋转的宝石和闪烁的圆环。调整好动画类型和速度，放进地图里就会像这样：</p>
<p><img src="https://z3.ax1x.com/2021/05/15/g6NX0P.gif" alt="g6NX0P.gif"></p>
<p>但是这种方法最多只能画四帧动画，那如果四帧并不能满足需求，这种时候就得用上<code>Movement Type</code>（移动方式）进行辅助了。</p>
<h3 id="四帧以上"><a href="#四帧以上" class="headerlink" title="四帧以上"></a>四帧以上</h3><p><code>Movement Type</code>位于左下角，一共有七种：</p>
<table>
<thead>
<tr>
<th>Movement Type</th>
<th>移动类型</th>
<th>处理方法</th>
</tr>
</thead>
<tbody><tr>
<td>Stationary</td>
<td>静止</td>
<td>不移动</td>
</tr>
<tr>
<td>Random</td>
<td>随机</td>
<td>随机移动</td>
</tr>
<tr>
<td>Vertical</td>
<td>纵向</td>
<td>垂直方向移动，碰到障碍物会反向移动</td>
</tr>
<tr>
<td>Horizontal</td>
<td>横向</td>
<td>水平方向移动，碰到障碍物会反向移动</td>
</tr>
<tr>
<td>Approach Player</td>
<td>靠近主人公</td>
<td>往主人公的所在位置靠近</td>
</tr>
<tr>
<td>Away from Player</td>
<td>远离主人公</td>
<td>远离主人公的所在位置</td>
</tr>
<tr>
<td>Custom</td>
<td>自定义</td>
<td>指定该事件的移动路线</td>
</tr>
</tbody></table>
<p>这里可以用<code>Custom</code>（自定义）来增加动画的帧数。当选择自定义时，会发现底端多了一个名为<code>Frequency</code>的选项，它的数字越大，执行指令的速度就越快。</p>
<p>为了举例，我画了一个球体在地面上弹跳的动画：</p>
<p><img src="https://z3.ax1x.com/2021/05/15/g6R9OK.png" alt="g6R9OK.png"></p>
<p>注意此处我把它们分成了两组，这样设置移动路线的时候可以利用<code>Change Graphic</code>实现帧数之间的无缝衔接。</p>
<p>我们在<code>Movement Commands</code>里输入以下指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//首先是第一组的四帧</span><br><span class="line">$&gt;Turn Up</span><br><span class="line">$&gt;Turn Right</span><br><span class="line">$&gt;Turn Down</span><br><span class="line">$&gt;Turn Left</span><br><span class="line">//然后衔接上第二组</span><br><span class="line">Graphic:&#x27;ball&#x27;,2</span><br><span class="line">Turn Up</span><br><span class="line">Turn Right</span><br><span class="line">Turn Down</span><br><span class="line">Turn Left</span><br><span class="line">//再切换回第一组</span><br><span class="line">Graphic:&#x27;ball&#x27;,1</span><br></pre></td></tr></table></figure>

<p>之后将<code>Frequency</code>设置成5，按下确定，来看看效果：</p>
<p><img src="https://z3.ax1x.com/2021/05/15/g6WH54.gif" alt="g6WH54.gif"></p>
<p>一个弹跳的球完成了！</p>
<p>注：如果有其他需求，可以用事件指令<code>Set Move Route</code>并指定<code>This Event</code>进行编辑，效果是一样的。</p>
<hr>
<p>※以上内容仅作为个人观点，如有解释不当的部分欢迎讨论。内容随时会进行更新和补充。</p>
<p>※本文章的内容，包括文字、图片均为本人(Drifter)原创。可将文章提供的内容用于个人学习、研究以及其他非商业用途。转载时请务必注明地址和原作者信息，请勿用于商业性或盈利性用途。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>RM2003</tag>
        <tag>游戏开发</tag>
      </tags>
  </entry>
  <entry>
    <title>讲解RM2K3-Chipset的原理</title>
    <url>/2021/Chipset/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="有关Chipset"><a href="#有关Chipset" class="headerlink" title="有关Chipset"></a>有关Chipset</h2><p>Chipset是存放地图素材的地方，它是构成一切地图的基础，也是游戏开发者必须要去了解的东西。</p>
<span id="more"></span>

<h3 id="规格和配置"><a href="#规格和配置" class="headerlink" title="规格和配置"></a>规格和配置</h3><ol>
<li><p>规格</p>
<table>
<thead>
<tr>
<th>图像大小</th>
<th>导入格式</th>
</tr>
</thead>
<tbody><tr>
<td>480×256</td>
<td>PNG、BMP、XYZ</td>
</tr>
</tbody></table>
</li>
<li><p>配置</p>
<p><img src="https://i.loli.net/2021/05/11/79Pdmr3THInxUkj.png" alt="chipset.png"></p>
<p>这是一张Chipset的模板。可以看到被分成了五个部分：</p>
<blockquote>
<p>蓝色海洋元件（A）</p>
<p>黄色动画元件（B）</p>
<p>自动填充元件（C）</p>
<p>普通下层元件（D）</p>
<p>普通上层元件（E）</p>
</blockquote>
<p>所有的下层元件位于亮黄色折线的左边（包括ABC三个区域），上层则位于折线的右边。折线的中央有一块不太一样的空格，它代表透明色。<strong>注意：必须留一个空格表示透明色</strong></p>
<p>官方有关上下层元件的说明如下：</p>
<blockquote>
<p>The map is comprised of 2 layers (upper and lower)  and each has a different set of placeable tiles. The “lower layer” is used for  placing terrain such as sea, mountains, and dirt, while the “upper layer” is  used for details such as buildings, treasure chests, and characters.</p>
</blockquote>
<blockquote>
<p>地图由2层（上层和下层）组成，每层都有一组不同的可放置元件。“下层 ”用于放置地形，如大海、山脉和泥土，而 “上层 ”则用于放置细节，比如建筑物、宝箱和人物。</p>
</blockquote>
<p>了解了什么是上下层之后，我们可以开始着手画元件了。</p>
</li>
</ol>
<hr>
<h2 id="下层元件绘制"><a href="#下层元件绘制" class="headerlink" title="下层元件绘制"></a>下层元件绘制</h2><h3 id="初阶：四方连续与动画元件"><a href="#初阶：四方连续与动画元件" class="headerlink" title="初阶：四方连续与动画元件"></a>初阶：四方连续与动画元件</h3><ol>
<li><p>四方连续的画法</p>
<p>我们先从最简单的开始入手：只需一格（16×16）就能平铺成地面的四方连续型元件。例子：草地、泥土、地板、沙漠等等。</p>
<p><img src="https://i.loli.net/2021/05/11/ac1MesHqxf2CwJp.png" alt="四方连续"></p>
<p>首先构思好想要画的地面。比如我想要一块泥土，就用棕色填充一块16×16的格子作为基底，再确定好浅色和深色分别代表土块和阴影，画出一个大致的形状。但是仅仅像这样是不够的，还得检查拼接是否有瑕疵。检查的方法有很多种，图中我演示的是<code>对角线互换法</code>。像这样把一格分为四等分，把它们以对角线交换，在此基础上进行略微改动即可。</p>
<p>按照同样的方法继续绘制石块和海洋。</p>
</li>
<li><p>动画元件的画法</p>
<p>动画元件一共有三列可以被调用，每一列都有四个16×16的格子组成。动画的行进方向为从上至下1→2→3→4→1。这个区域的动画速度是无法被调整的，因此如果想要加快速度或减慢速度的话推荐使用行走图（Charset）进行绘制。</p>
<p>这里用我以前做的瀑布动画作为例子：</p>
<p><img src="https://z3.ax1x.com/2021/05/12/gd8mLR.png" alt="瀑布"></p>
<p>除了瀑布以外还可以画风扇、灯光、火焰等等。</p>
<p>当然也完全可以把这个区域当成一个静止的下层元件看待，只要四帧动画完全一致，那么这一列就和普通的下层元件没有区别。</p>
</li>
</ol>
<h3 id="进阶：自动填充"><a href="#进阶：自动填充" class="headerlink" title="进阶：自动填充"></a>进阶：自动填充</h3><p>自动填充是初学者在绘制时很容易碰壁的区域，光看系统自带的RTP也无法完全参透它的原理。它其实就是让系统自动帮忙填充边界的功能，只要运用好就可以大大缩短地图的配置时间。</p>
<p>这里我使用上面准备的石块作为自动填充的素材，将它和泥土结合形成一块石头路面。首先石块和泥土各复制成九块，按照3×3的规格排列。（石块要进行一些擦除和修改，使其变成一个不规则图形。按照自己的想法随意修改即可）</p>
<p><img src="https://z3.ax1x.com/2021/05/11/gaItb9.png" alt="重组并修改"></p>
<p>粉色的区域对应正中央四方连续型的石头图块，其余四个角分别用黄、绿、蓝、红标出。之后按照第二步进行一个重组。</p>
<p>重组完成后会发现中央的四个直角区域有瑕疵（亮粉色区域），把它们修正后可以得到一个完美的十字。</p>
<p><img src="https://z3.ax1x.com/2021/05/11/gaT80J.png" alt="自动填充图块"></p>
<p>之后将高光部分如上图拼起来，可以得到两个小图块。这两个小图块就是自动填充图块的精髓，左边代表了<code>外侧边缘的填充</code>，右边代表了<code>内侧边缘的填充</code>。</p>
<blockquote>
<p>注：关于外侧边缘的填充系统会自动完成，实际上第一格只是起到一个标记的作用，方便作者在编辑器里调用相关内容。因此无论这一格不论画成什么样都都不会影响外侧边缘的填充。</p>
</blockquote>
<p>之后我们把这些元素进行一个最终组装：</p>
<p><img src="https://z3.ax1x.com/2021/05/11/gaHnMT.png" alt="cobble"></p>
<p>锵锵！一块自动填充元件就画好啦！</p>
<h3 id="中阶：海洋图块"><a href="#中阶：海洋图块" class="headerlink" title="中阶：海洋图块"></a>中阶：海洋图块</h3><p>海洋图块位于Chipset的左上角，一组由三个16×16的图块为一排、四个16×16的图块为一列组成，共12格。每排它都会自动按照从左到右（默认1→2→3→2）的顺序播放。可以算作是一种动画图块。</p>
<p>同样地，先绘制好海洋的三帧动画，进行一个调色和拼装：</p>
<p><img src="https://z3.ax1x.com/2021/05/11/gaqKUJ.md.png" alt="ocean"></p>
<p>在这里我设置底下两排为深水区。实际上这块可以灵活变通，不一定要设置深水区，甚至都不一定要画海洋，只要知道它会自动从左往右播放就行。</p>
<p>海洋画好后我们来设置陆地。依旧是之前画的泥土<del>（本来应该重新画草地的但我懒）</del>拼成一个十字，但进行一个调色使其看起来像是青苔陆地。</p>
<p><img src="https://z3.ax1x.com/2021/05/11/gaLweU.png" alt="island"></p>
<p>在周围画上边缘体现厚度。这里我不推荐把16*16的格子画满，最多到四分之一的大小就好（就是下方示意图的小色块的大小），而且如果想偷懒的话，还可以只画一边，然后水平翻转一下就可以了。<del>当然不偷懒会更自然好看，可我懒</del></p>
<p>最容易配置的是黄色的区域，就是四个内侧直角所在的地方。把它们组合拼装我们可以得到第一块。</p>
<p>绿色和红色区域是左右接续边缘，把它们组合拼装得到第二块。</p>
<p>蓝色和紫色区域是上下接续边缘，把它们组合拼装得到第三块。</p>
<p>最后就是白色区域，它是负责拼接外侧转角的部分，组合拼装得到第四块。</p>
<p>这样我们就准备好所有的素材了！把整体拖入上面画的海洋图层里看看效果（不满意还可以再后期调色，直到看起来像是陆地为止）此外考虑到陆地周边的海洋不会是深水区，因此配置的时候背景采用的是第一排的海洋图块。</p>
<p><img src="https://z3.ax1x.com/2021/05/11/gavoHf.png" alt="海洋图块"></p>
<p>大功告成！</p>
<h3 id="高阶：应用"><a href="#高阶：应用" class="headerlink" title="高阶：应用"></a>高阶：应用</h3><p>现在我们学会了自动填充的绘制方法，也知道了它的构成原理，那么接下来该谈谈如何灵活运用这块区域，让它变成一个“元件储藏室”。</p>
<p>介绍Chipset的配置时提到，不管是海洋元件、动画元件还是自动填充元件，它们都属于<code>下层元件</code>。下层原件就是构成地面或墙壁的元素，一不小心就会画很多。这种时候为了节省空间，是可以把下层元件放进上层区域管理的。但如果上层的空间都已经被各种元件占满了，还有一些没地方放怎么办？一张地图只支持一张Chipset，难道要忍痛删除部分元件吗？</p>
<p>不用着急，这里有两种解决办法：</p>
<ol>
<li>利用行走图，让它变成一块可管理的第三级元件。</li>
<li>利用自动填充区域，让它变成可以在编辑器里复制的下层元件。</li>
</ol>
<p>第一种方法请参考<a href="https://drifter-games.com/2021/Charset/">Charset-物件的配置</a>，在这里详细解释一下第二种解决办法。</p>
<p><img src="https://z3.ax1x.com/2021/05/12/gd3w24.png" alt="数字与符号"></p>
<p>这里为了方便大家理解，我在每一格里放入了对应的数字和符号。当这张Chipset被导入进编辑器后，数字0以16×16的大小出现在下层编辑器的左上角，表示这一格可以调用数字1~9所在区域的内容。</p>
<p>我们在地图里画出一个3×3的格子就可以自然得到1~9，而右上角的冒号得画出一个十字才能被显示出来。如图所示：</p>
<p><img src="https://z3.ax1x.com/2021/05/12/gd3ca6.png" alt="编辑器实践"></p>
<p>按住<code>Shift</code>不要松开，使用<code>右键</code>点击任何数字所在区域即可随意复制（长按右键拖动可以复制更多内容），之后在任意区域再次<code>右键</code>就可以粘贴了。<strong>※全程请不要松开Shift。</strong></p>
<p>按照这个方法，我们可以随意排列组合1~9以及符号，而不受自动填充系统的影响。这就相当于多出了10个16×16的下层空间！当普通上层和下层的区域都被塞满，而自动填充区域还有空间时，请不妨使用这个方法配置更多元件。</p>
<hr>
<h2 id="上层元件绘制"><a href="#上层元件绘制" class="headerlink" title="上层元件绘制"></a>上层元件绘制</h2><p>上层并没有多少可以讲解的部分，除了注意配置一栏提到的<code>必须留空的格子</code>以外，几乎所有的空间都可以被调用。不论是树木，屋顶，栏杆，家具，一切能够在地图上存在的物件都可以往上面画。</p>
<hr>
<h2 id="数据库设定"><a href="#数据库设定" class="headerlink" title="数据库设定"></a>数据库设定</h2><p>最后我们画好一整张Chipset后，在数据库里进行一个通行设定和音效的设定。</p>
<p>进入<code>Database</code>，找到<code>Tilesets</code>选项卡，在<code>Tileset Graphic</code>里指定画好的Chipset就可以开始进行设定了。</p>
<ol>
<li><p>下层元件<code>Lower Layer</code></p>
<p><code>Terrain</code>是音效和特效的指定。得先在<code>Terrain</code>选项卡里设定好，再回到<code>Tilesets</code>选项卡里指定相关的数字。</p>
<p><code>Passability</code>就是通行设定。○是可通行，×是不可通行，☆是可穿过，□是自动填充元件的专属通行规则。</p>
<p><code>Passage(4 Dir)</code>是通行设定的一个辅助功能。如果不想让主人公在特定方向通过此图块，只要把这个方向关掉即可，反之亦然。</p>
<p><code>Global Terrain Setting</code>是可以将Chipset上所有的Terrain都设置成同一种数字的功能。</p>
<p><code>Autotile Animation</code>可以设定海洋元件的播放速度和播放顺序。有自动预览，可以根据自己的喜好进行调整。</p>
</li>
<li><p>上层元件<code>Upper Layer</code></p>
<p><code>Passability</code>与<code>Passage(4 Dir)</code>的功能与下层元件一样，都是通行设定。</p>
<p><code>Counter</code>是计数标记，和地图事件有关。当一个地图事件用上了以<code>Action Button</code>作为开关时，主人公必须踩在上面或面对它按确认键才能激活。但计数标记图块存在于主人公和事件之间时，事件就会直接执行。</p>
</li>
</ol>
<p>设置好后就可以开始在编辑器里绘制地图了。</p>
<hr>
<p>※以上内容仅作为个人观点，如有解释不当的部分欢迎讨论。内容随时会进行更新和补充。</p>
<p>※本文章的内容，包括文字、图片均为本人(Drifter)原创。可将文章提供的内容用于个人学习、研究以及其他非商业用途。转载时请务必注明地址和原作者信息，请勿用于商业性或盈利性用途。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>RM2003</tag>
        <tag>游戏开发</tag>
      </tags>
  </entry>
  <entry>
    <title>nexT主题v5升级至v8记录</title>
    <url>/2021/nextupdate/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><hr>
<h2 id="更新之前"><a href="#更新之前" class="headerlink" title="更新之前"></a>更新之前</h2><p>昨天写搭建记录的时候发现自己的Hexo和Node.js还有Git都是最新版本，但nexT版本还停留在5.1.4，看了一下官网最新版本都已经8.4.0了，遂决定手动跨版本更新。</p>
<p>这是nexT的历代版本仓库。</p>
<table>
<thead>
<tr>
<th>年</th>
<th>版本号</th>
<th>仓库地址</th>
</tr>
</thead>
<tbody><tr>
<td>2014~2017</td>
<td>v5</td>
<td><a href="https://github.com/iissnan/hexo-theme-next">https://github.com/iissnan/hexo-theme-next</a></td>
</tr>
<tr>
<td>2018~2019</td>
<td>v6~v7</td>
<td><a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a></td>
</tr>
<tr>
<td>2020</td>
<td>v8</td>
<td><a href="https://github.com/next-theme/hexo-theme-next">https://github.com/next-theme/hexo-theme-next</a></td>
</tr>
</tbody></table>
<p>下载主题就相当于从仓库下载代码，这就是为什么明明跟着教程走却只能安装到v5版本的原因。可v5升级到v8在网上的教程少得可怜，看了官方的介绍还是一知半解……还是走一步算一步，出了错再随机应变吧。</p>
<p>以下是我的更新步骤。</p>
<span id="more"></span>

<h2 id="需要准备的"><a href="#需要准备的" class="headerlink" title="需要准备的"></a>需要准备的</h2><ol>
<li>下载一个文件对比软件，比如<code>BeyondCompare</code></li>
<li>一个备份文件夹，用来装之前的v5版本</li>
<li><code>GitBash</code>，所有的基础</li>
</ol>
<p>准备以上材料，我们开始进行更新。</p>
<hr>
<h3 id="第一步-安装"><a href="#第一步-安装" class="headerlink" title="第一步 安装"></a>第一步 安装</h3><ul>
<li><p>将themes中的next文件夹转移至备份文件夹内。</p>
</li>
<li><p>之后用GitBash定位到站点文件夹，通过<code>npm</code>安装最新版本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next</span><br></pre></td></tr></table></figure></li>
<li><p>下载完成后，在站点文件夹的node_modules里找到一个名为hexo-theme-next的文件夹，这就是最新版的主题文件。把它复制到themes文件夹内，并重新命名为<code>next-v8</code>。（只是个例子）</p>
</li>
<li><p>打开站点配置文件，把<code>themes: next</code>后面的内容改成<code>next-v8</code>。</p>
</li>
<li><p>在GitBash中输入<code>hexo version</code>查看当前版本号，出现一个巨大NEXT和最新版本号即成功安装。</p>
</li>
</ul>
<p>恭喜！你已经完成一半的内容了！</p>
<h3 id="第二步-配置"><a href="#第二步-配置" class="headerlink" title="第二步 配置"></a>第二步 配置</h3><p>因为是v5刚刚起步的缘故，官网上所说的迁移方法对我来说并没有什么用处。这里我选择单独配置：</p>
<ul>
<li><p>把这个还没有动过的主题配置文件复制出来，重命名为<code>_config.next.yml</code>，放在站点文件夹里。</p>
</li>
<li><p>运行<code>BeyondCompare</code>，打开旧主题配置和新主题配置，进行一个比较和修改。</p>
<p><strong>注意！最开始的主题设置，如果想启用之前的<code>Gemini</code>，请关闭默认主题选项！！！</strong></p>
</li>
<li><p>然后可以试着运行一下<code>hexo s</code>，查看是否可以正常显示。建议一边改一边检查，新主题配置文件的内容比起v5还是有很大的区别的，具体设置跟着注释走，不要无脑修改。</p>
</li>
</ul>
<p>至此，你已经完成了v5至v8的升级。</p>
<h3 id="第三步-自定义"><a href="#第三步-自定义" class="headerlink" title="第三步 自定义"></a>第三步 自定义</h3><p>自定义所消耗的时间最长。原因在于我很想还原v5的配置，但内部文件改动太大，加上针对v8的自定义的教程比更新的教程还少，无从下手，只得摸索。</p>
<h4 id="Font-Awesome"><a href="#Font-Awesome" class="headerlink" title="Font Awesome"></a>Font Awesome</h4><p>v8更新之后，所有的有关图标的配置都得改成fa fa-xxx格式才能正常显示。具体的图标样式和格式在官网上可以查看引用。<a href="https://fontawesome.com/icons">Font Awesome</a></p>
<h4 id="代码样式"><a href="#代码样式" class="headerlink" title="代码样式"></a>代码样式</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># All available themes: https://theme-next.js.org/highlight/</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> </span><br><span class="line">    <span class="attr">dark:</span> </span><br><span class="line">  <span class="attr">prism:</span></span><br><span class="line">    <span class="attr">light:</span> </span><br><span class="line">    <span class="attr">dark:</span> </span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> </span><br></pre></td></tr></table></figure>

<p>这里的代码模块样式可以在<a href="https://theme-next.js.org/highlight/">这里</a>找到即时预览，把样式名直接输入进<code>theme</code>和<code>prism</code>栏即可。把<code>copy_button</code>设置为True可以打开一键复制按钮，很方便。</p>
<p>此处我把底部的<code>style</code>设置成了<code>flat</code>，也有不少人选择<code>mac</code>（这款也很好看推荐大家尝试）</p>
<h4 id="自定义CSS目录"><a href="#自定义CSS目录" class="headerlink" title="自定义CSS目录"></a>自定义CSS目录</h4><p>v8更新之后很多文件都找不到了，而要自定义CSS得在站点文件夹的<code>/source/_data/styles.styl</code>里改。没有_data的话就创一个。</p>
<p>然后在主题配置里将<code>custom_file_path</code>里的<code>style</code>启用即可。</p>
<p>这里是我的配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">图片阴影</span></span><br><span class="line"><span class="string">.medium-zoom-image</span> &#123;</span><br><span class="line">  <span class="attr">box-shadow:</span> <span class="number">0</span> <span class="string">10px</span> <span class="string">30px</span> <span class="string">0px</span> <span class="string">rgba(0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.4</span><span class="string">);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">//</span> <span class="string">短代码颜色</span></span><br><span class="line"><span class="string">code</span> &#123;</span><br><span class="line">  <span class="attr">background:</span> <span class="comment">#E3E1E8;</span></span><br><span class="line">  <span class="attr">color:</span> <span class="comment">#383a42;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">//</span> <span class="string">隐藏顶部黑线条</span></span><br><span class="line"><span class="string">.headband</span> &#123;</span><br><span class="line">  <span class="attr">display:</span> <span class="string">none;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">//底部文字颜色</span></span><br><span class="line"><span class="string">.footer-inner</span> &#123;</span><br><span class="line">  <span class="attr">color:</span> <span class="comment">#494948;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">//</span> <span class="string">代码滑块</span></span><br><span class="line"><span class="string">.table-container</span> &#123;</span><br><span class="line">  <span class="attr">scrollbar-width:</span> <span class="string">thin;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">.table-container::-webkit-scrollbar</span> &#123;</span><br><span class="line">  <span class="attr">width:</span> <span class="number">0.</span><span class="string">5em;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="number">0.</span><span class="string">5em;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">.table-container::-webkit-scrollbar-thumb</span> &#123;</span><br><span class="line">  <span class="attr">border-radius:</span> <span class="string">4px;</span></span><br><span class="line">  <span class="attr">background:</span> <span class="comment">#00af91;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">.table-container::-webkit-scrollbar-track</span> &#123;</span><br><span class="line">  <span class="attr">background:</span> <span class="string">none;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">//透明化：自定义opacity的值。范围为0~1的小数</span></span><br><span class="line"><span class="string">//文章内容透明</span></span><br><span class="line"><span class="string">.main-inner</span> &#123; </span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.95</span><span class="string">;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">//侧边框透明</span></span><br><span class="line"><span class="string">.sidebar</span> &#123;</span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.95</span><span class="string">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">//菜单栏透明</span></span><br><span class="line"><span class="string">.header-inner</span> &#123;</span><br><span class="line">  <span class="attr">margin-top:</span> <span class="string">18px;</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">rgba(255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.95</span><span class="string">);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">//搜索框透明</span></span><br><span class="line"><span class="string">.popup</span> &#123;</span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.95</span><span class="string">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">//</span> <span class="string">添加顶部边距</span></span><br><span class="line"><span class="string">.main</span> &#123;</span><br><span class="line">  <span class="attr">margin:</span> <span class="string">4px</span> <span class="string">auto</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">.header</span> &#123;</span><br><span class="line">  <span class="string">+mobile()</span> &#123;</span><br><span class="line">    <span class="attr">padding:</span> <span class="string">4px;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">//</span> <span class="string">圆角计划</span></span><br><span class="line"><span class="string">.header-inner</span> &#123;</span><br><span class="line">  <span class="attr">border-radius:</span> <span class="string">50px</span> <span class="string">50px</span> <span class="string">18px</span> <span class="string">18px;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">.site-brand-container</span> &#123;</span><br><span class="line">  <span class="attr">border-radius:</span> <span class="string">18px</span> <span class="string">18px</span> <span class="number">0</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line">  <span class="string">+mobile()</span> &#123;</span><br><span class="line">    <span class="attr">border-radius:</span> <span class="string">18px;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">.sidebar-inner</span> &#123;</span><br><span class="line">  <span class="attr">border-radius:</span> <span class="string">18px;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">.back-to-top</span> &#123;</span><br><span class="line">  <span class="attr">border-radius:</span> <span class="number">0</span> <span class="number">0</span> <span class="string">18px</span> <span class="string">18px;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">.post-block</span> &#123;</span><br><span class="line">  <span class="attr">border-radius:</span> <span class="string">18px</span> <span class="type">!important;</span></span><br><span class="line">  <span class="attr">margin-top:</span> <span class="string">18px;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">.pagination</span> &#123;</span><br><span class="line">  <span class="attr">border-radius:</span> <span class="string">18px</span> <span class="type">!important;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">.comments</span> &#123;</span><br><span class="line">  <span class="attr">border-radius:</span> <span class="string">18px</span> <span class="type">!important;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">//</span> <span class="string">字体大小</span></span><br><span class="line"><span class="string">.post-body</span> &#123;</span><br><span class="line">  <span class="attr">font-size:</span> <span class="string">15px;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>里面的数值可以根据自己的想法修改。这里我启用了圆角化，这样页面看起来可爱又舒服。</p>
<h4 id="Canvas-nest"><a href="#Canvas-nest" class="headerlink" title="Canvas_nest"></a>Canvas_nest</h4><p>v8更新之后动态背景只剩下<code>canvas_ribbon</code>一个选项了，但我又很想要还原以前的风格，于是找到了<a href="https://github.com/theme-next/theme-next-canvas-nest">官方地址</a>，跟着README一步一步配置即可。</p>
<p>再次进入主题配置文件，找到<code>custom_file_path</code>，将<code>footer</code>启用。</p>
<p>还需要注意的一点：v8升级之后<code>swig</code>文件已经替换成了<code>njk</code>，因此官方所说的</p>
<blockquote>
<p>Create a file named <code>footer.swig</code> in <code>hexo/source/_data</code> directory (create <code>_data</code> directory if it does not exist).</p>
</blockquote>
<p>应该将<code>footer.swig</code>改成<code>footer.njk</code>。</p>
<p>最后在配置文件里新增一段<code>canvas_nest: true</code>就可以运行了。</p>
<h4 id="Animation-Settings"><a href="#Animation-Settings" class="headerlink" title="Animation Settings"></a>Animation Settings</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">motion:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">async:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">transition:</span></span><br><span class="line">    <span class="comment"># All available transition variants: https://theme-next.js.org/animate/</span></span><br><span class="line">    <span class="attr">post_block:</span> <span class="string">fadeIn</span></span><br><span class="line">    <span class="attr">post_header:</span> <span class="string">fadeInDown</span></span><br><span class="line">    <span class="attr">post_body:</span> <span class="string">fadeInDown</span></span><br><span class="line">    <span class="attr">coll_header:</span> <span class="string">fadeInLeft</span></span><br><span class="line">    <span class="comment"># Only for Pisces | Gemini.</span></span><br><span class="line">    <span class="attr">sidebar:</span> <span class="string">bounceInUp</span></span><br></pre></td></tr></table></figure>

<p>在<a href="https://animate.style/">这里</a>可以看到所有的动画设置和名称，根据想要的样式修改即可。</p>
<h4 id="自动打开编辑器"><a href="#自动打开编辑器" class="headerlink" title="自动打开编辑器"></a>自动打开编辑器</h4><p>这与更新无关，但加上之后可以提升一些写作的速度。</p>
<p>在站点目录下新建<code>scripts</code>文件夹，里面添加一个js脚本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> spawn = require(<span class="string">&#x27;child_process&#x27;</span>).exec;</span><br><span class="line">hexo.on(<span class="string">&#x27;new&#x27;</span>, function(data)&#123;</span><br><span class="line">  spawn(<span class="string">&#x27;start  &quot;Typora.exe&quot; &#x27;</span> + data.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>此处的<code>start &quot;Typora.exe&quot;</code>里面应该填写编辑器所在的路径。此处我用的是Typora，因此这里应该指向Typora.exe所在的文件路径。</p>
<p>配置好后，之后每次执行完<code>hexo new</code>后都会自动弹出编辑器，不用再去<code>_post</code>路径下寻找文章了。</p>
<hr>
<p>至此，你已经完成了此次更新！恭喜！</p>
<p>其他问题和更新相关的说明请查看<a href="https://github.com/next-theme/hexo-theme-next/issues/4">官方文档</a></p>
]]></content>
      <categories>
        <category>帮助</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>nexT</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建经验</title>
    <url>/2021/Blog/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在一堆博客平台上兜兜转转好几年，最终还是选择了GitHub。无各种限制+无广告+无社交互动已经很让人心动了，最重要的还是对系统友好、不用花高价去维护，很适合像我这样又穷又自闭的赛博难民。</p>
<p>这两天花了一些时间学习了怎么搭建和配置，趁着还没忘记录一下搭建时遇到的问题和解决办法（详细的搭建过程很容易找到，这里就不阐述了）</p>
<span id="more"></span>

<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>先说明自己所用的版本信息：</p>
<blockquote>
<p>Git-2.31.1 64bit</p>
<p>Nodejs-14.16.1 64bit</p>
<p>Hexo-5.4.0</p>
<p>nexT-5.1.4</p>
</blockquote>
<p>电脑是Win10。</p>
<hr>
<h3 id="1-运行hexo-d时显示错误"><a href="#1-运行hexo-d时显示错误" class="headerlink" title="1. 运行hexo d时显示错误"></a>1. 运行<code>hexo d</code>时显示错误</h3>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fatal: unable to access &#x27;yoursite&#x27;: Failed to connect to github.com port 443: Timed out</span><br></pre></td></tr></table></figure>

<p>   这是一个经常会产生的问题（我几乎每次部署都会弹这种错误反馈）实在不行就<code>hexo clean</code>几次，重新部署几次总能成功的。</p>
<h3 id="2-域名解析时出现问题"><a href="#2-域名解析时出现问题" class="headerlink" title="2. 域名解析时出现问题"></a>2. 域名解析时出现问题</h3><p>   这个问题一般不会出现，但我实在是太想要一个个人域名了就去Godaddy上买了一个。买完后发现网上找到的教程早已过时，DNS的配置方法和页面布局被官方改得妈都不认识，只好自己慢慢试错了。</p>
<ul>
<li>首先打开cmd，输入<code>ping username.github.io</code>得到GitHub的IP。</li>
<li>进入Godaddy的个人域名管理界面，点击DNS进入DNS管理。添加一个类型A，名称@，值为IP的记录。此外修改名称为www的CNAME，将值改为username.github.io。TTL是默认1h，可以不用动它。</li>
<li><strong>然后把剩余的DNS管理可编辑的都删了</strong>（它默认有个_domainconnect 的CNAME和parked custom的记录）</li>
<li>在本地文件source中创建一个CNAME的文件，里面写上自己买的域名，保存，<strong>删掉文件后缀。</strong></li>
<li>在GitBash中输入<code>hexo d</code>，让这个CNAME上传到GitHub仓库。</li>
<li>打开仓库，点击<code>Settings</code>进入仓库的设置界面。在左边的目录中找到<code>Pages</code>，在Custom Domain里输入你的域名，然后等待它自己检测DNS配置，变成绿色的√就证明域名解析成功。（如果期间弹出了DNS解析失败等提示可能需要等待一段时间。）</li>
<li>勾选Enforce HTTPS。</li>
</ul>
<p>   然后输入域名就可以跳转到博客界面啦。</p>
<h3 id="3-tags和categories的页面显示404"><a href="#3-tags和categories的页面显示404" class="headerlink" title="3. tags和categories的页面显示404"></a>3. tags和categories的页面显示404</h3><p>   这个问题很容易产生！我觉得最大的原因出现在主题的配置文件里。</p>
<ul>
<li><p>打开主题配置文件，找到menu一栏</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tags:</span> <span class="string">/tags/||</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">/categories/||</span> <span class="string">th</span></span><br></pre></td></tr></table></figure>

<p>把/和||之间的空格删掉。</p>
</li>
<li><p>在GitBash中输入<code>hexo new page tags</code>，让它在source下生成一个名为tags的文件夹，里面会多出个index.md的文件。</p>
</li>
<li><p>打开index.md，在最后一行中加入一句<code>type: &quot;tags&quot;</code>，直接保存退出。不需要加<code>---</code>在顶端和末端。</p>
</li>
<li><p>添加categories的方法就是同上两个步骤，只是把<code>tags</code>替换成<code>categories</code>。</p>
</li>
<li><p>执行<code>hexo s</code>，在localhost上查看页面是否显示正常。</p>
</li>
</ul>
<p>   没啥问题就<code>hexo d</code>了。</p>
<hr>
<h2 id="nexT自定义"><a href="#nexT自定义" class="headerlink" title="nexT自定义"></a>nexT自定义</h2><p>这里记录一些我觉得还比较有趣（麻烦）的自定义过程。</p>
<h3 id="1-访客量设置"><a href="#1-访客量设置" class="headerlink" title="1. 访客量设置"></a>1. 访客量设置</h3><p>   不蒜子在2018年换了域名，所以按照网上找到的教程走很有可能无法显示访问量。</p>
<p>   打开<code>\themes\next\layout\third-party\analytics\busuanzi-counter.swig</code>文件，把第一行改成</p>
   <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.busuanzi_count.enable %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;busuanzi-count&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>   然后在主题配置文件里将<code>busuanzi_count</code>目录下的enable改成true。这下面还可以改一下<code>site_uv_footer</code>和<code>site_pv_footer</code>，这是访问量的后缀。</p>
<p>注释：新版next的配置文件中已经增加了这个功能，只需把开关打开就可以使用了。</p>
<h3 id="2-头像设置成圆形并且让它转起来"><a href="#2-头像设置成圆形并且让它转起来" class="headerlink" title="2. 头像设置成圆形并且让它转起来"></a>2. 头像设置成圆形并且让它转起来</h3><p>   打开<code>themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code>，输入</p>
   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</span><br><span class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</span><br><span class="line">  <span class="attribute">height</span>: $site-author-image-height;</span><br><span class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">2s</span> all;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.site-author-image</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br></pre></td></tr></table></figure>

<p>注释：新版next的配置文件中已经增加了这个功能，只需把开关打开就可以使用了。</p>
<h3 id="3-文章置顶"><a href="#3-文章置顶" class="headerlink" title="3. 文章置顶"></a>3. 文章置顶</h3><p>   首先在GitBash中输入<code>npm uninstall hexo-generator-index --save</code>卸载默认插件。</p>
<p>   然后安装一个新的插件<code>npm install hexo-generator-index-pin-top --save</code></p>
<p>   之后写文章的时候在标签分类下面写上一行<code>top: true</code>就可以让这篇文章出现在第一个了。</p>
<hr>
<h2 id="一些摸索"><a href="#一些摸索" class="headerlink" title="一些摸索"></a>一些摸索</h2><h3 id="仓库整理"><a href="#仓库整理" class="headerlink" title="仓库整理"></a>仓库整理</h3><p>在查看仓库时发现我的文章全都以单独文件夹的形式罗列在仓库里，时间长了肯定不好管理。去看了其他人的仓库却发现他们并没有我这样的情况，难道是我最开始安装Git的时候出错了吗？还是说我有哪些配置改错了？</p>
<p>既然是生成部署的问题，那就去站点配置里找答案。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:name/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br></pre></td></tr></table></figure>

<p>当时我自定义的时候想“永久链接的格式当然要简介明了才比较好记”，于是跟着官网的设置选择了以文件名(name)为永久链接，这样我的文章地址就变成了<code>https://drifter-games.com/name</code>。</p>
<p>好看是好看，但在进行<code>hexo g</code>的时候，这篇文章就会以<code>index.html</code>的形式放在<code>public\name</code>的文件夹里。（同理，有几篇文章就会生成几个文件夹）随着文章数增加，文件夹也会越来越多，仓库内部的画面可想而知。所以我选择了以年份作为一个整理的方案：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:name/</span></span><br></pre></td></tr></table></figure>

<p>这样进行<code>hexo g</code>的时候，public文件夹里就会自动把文章进行一个年份归档，之后部署到GitHub仓库的时候就不会再出现这个问题了。</p>
<p>注：执行<code>hexo clean</code>时会自动删除public文件，如果找不到public文件夹在哪的话请先执行<code>hexo g</code>查看。</p>
]]></content>
      <categories>
        <category>帮助</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>nexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Submission rules</title>
    <url>/2020/subrules/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="投稿规则"><a href="#投稿规则" class="headerlink" title="投稿规则"></a>投稿规则</h2><h3 id="Wallpaper"><a href="#Wallpaper" class="headerlink" title="Wallpaper"></a>Wallpaper</h3><ul>
<li><p>壁纸的规格</p>
<ul>
<li><p>画布大小使用320×240像素为最佳（比例为4：3也可以，不过最终都会被缩小成320×240。如果介意图片变糊，请尽量使用这个大小进行创作。）</p>
</li>
<li><p>图像命名为<code>pc-wallpaper-[yourID].png</code></p>
</li>
<li><p>有条件的请将图片转换为<code>索引模式256色</code>（这一步不会可以跳过，也可以参考教程）</p>
</li>
<li><p>给壁纸起一个标题（英文最佳）</p>
</li>
</ul>
</li>
</ul>
<hr>
<h3 id="Music"><a href="#Music" class="headerlink" title="Music"></a>Music</h3><ul>
<li><p>音乐的规格：</p>
<ul>
<li><p>不宜过长，前后可以无缝衔接</p>
</li>
<li><p>格式为wav或mp3</p>
</li>
<li><p>有条件的请尽量压缩大小再上传</p>
</li>
<li><p>文件命名为<code>[title]_[yourID].wav/mp3</code></p>
</li>
</ul>
</li>
</ul>
<h3 id="提交方式"><a href="#提交方式" class="headerlink" title="提交方式"></a>提交方式</h3><p>发送至邮箱：<a href="mailto:&#x68;&#x79;&#111;&#x75;&#114;&#121;&#117;&#x75;&#64;&#x66;&#x6f;&#120;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#111;&#109;">&#x68;&#x79;&#111;&#x75;&#114;&#121;&#117;&#x75;&#64;&#x66;&#x6f;&#120;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#111;&#109;</a></p>
]]></content>
      <categories>
        <category>投稿规则</category>
      </categories>
      <tags>
        <tag>梦日记派生</tag>
      </tags>
  </entry>
  <entry>
    <title>Help</title>
    <url>/2020/Help/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><ul>
<li><p> Q：打开后有乱码<br>A：一般不会出现这种情况，不过万一出现了请下载0.00+版本。</p>
</li>
<li><p>Q：打开后有弹窗报错<br>A：一般是缺少RTP。请安装<a href="https://dl.degica.com/rpgmakerweb/run-time-packages/rpg2003_rtp_installer.zip">英文版rtp2003</a>，解压后将文件复制粘贴于Ephemreal的内部文件夹内。</p>
</li>
</ul>
<p><strong>重名的情况请务必保留源文件不要覆盖！！！！！！！！</strong> </p>
<ul>
<li><p>Q：可以用Easyrpg启动吗<br>A：请<strong>不要</strong>这样做，会有很多奇怪的bug。<del>信我，开头就会黑屏</del></p>
</li>
<li><p>Q：Mac可以玩吗<br>A：很遗憾，非Windows系统是无法运行游戏的……</p>
</li>
<li><p>Q：非中文系统想运行简体中文版<br>A：Win7用户请下载Applocale，安装后选择中文，指定Start.exe后运行即可，不成功的情况请指定Ephemreal文件夹内的RPG_RT.exe运行。<br>Win10用户请下载<a href="https://github.com/xupefei/Locale-Emulator/releases">Local Emulator</a>，按步骤安装后鼠标右键选中Start.exe，在菜单栏里勾选上「按程序源环境配置」应该就能成功运行了，不成功的情况同上。</p>
</li>
</ul>
<p>遇到了其他问题请参考或私信<br><a href="http://yumenikki.info/archives/%e6%b4%be%e7%94%9f%e5%ae%89%e8%a3%85%e6%96%b9%e6%b3%95/">派生安装方法</a></p>
]]></content>
      <categories>
        <category>帮助</category>
      </categories>
      <tags>
        <tag>梦日记派生</tag>
      </tags>
  </entry>
</search>
